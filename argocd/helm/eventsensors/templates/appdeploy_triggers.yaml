apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: webhook
  namespace: argo-events
spec:
  template:
    serviceAccountName: operate-workflow-sa
  dependencies:
    - name: webhook-dep
      eventSourceName: webhook
      eventName: ssm_parameterstore_notifications
    - name: github-dep
      eventSourceName: github
      eventName: app-deployments
      filters:
        data:
          - path: headers.X-Github-Event
            type: string
            value:
              - pull_request
          - path: body.action
            type: string
            value:
              - closed
          - path: body.pull_request.state
            type: string
            value:
              - closed
          - path: body.pull_request.merged
            type: bool
            value: 
              - "true"
  triggers:
    - template:
        conditions: "webhook-dep || github-dep"
        name: webhook-workflow-trigger
        k8s:
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: deply-workflow-
              spec:
                entrypoint: argocd-deploy
                arguments:
                  parameters:
                    - name: gitownername
                      value: "n/a"
                    - name: gitrepofullname
                      value: "n/a"
                    - name: repoName
                      value: "n/a"
                    - name: pr-number
                      value: "n/a"
                    - name: dr_signal
                      value: "false"
                templates:
                - name: argocd-deploy
                  inputs:
                    parameters:
                      - name: gitownername
                      - name: gitrepofullname
                      - name: repoName
                      - name: pr-number
                      - name: dr_signal
                    artifacts:
                      - name: init-script
                        path: /usr/local/bin/deploy-scripts/init.sh
                        mode: 755
                        raw:
                          data: |
                            #!/bin/bash
                            set -o xtrace
                            echo "Trigged repo $GitRepoFullName, $GitOwnerName, $GitRepoName, $PullRequestNumber"
                            yum install findutils -y
                            yum install git -y
                            yum install jq -y
                            curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.28.3/2023-11-02/bin/linux/amd64/kubectl
                            chmod +x ./kubectl
                            mv -f ./kubectl /usr/local/bin/kubectl
                            curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
                            chmod +x /usr/local/bin/argocd
                            curl -sSL -o /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
                            chmod +x /usr/local/bin/yq
                      - name: deploy-script
                        path: /usr/local/bin/deploy-scripts/deploy_all.sh
                        mode: 755
                        raw:
                          data: |
                            #!/bin/bash
                            set -o xtrace
                            
                            #run init
                            source /usr/local/bin/deploy-scripts/init.sh

                            echo "$dr_signal"
                            if [ "${dr_signal}" = "Update" ] 
                            then
                              echo "Running DR mode"
                              /usr/local/bin/deploy-scripts/deploy_dr.sh
                            else
                              /usr/local/bin/deploy-scripts/deploy_live.sh
                            fi
                      - name: deploy-script-dr
                        path: /usr/local/bin/deploy-scripts/deploy_dr.sh
                        mode: 755
                        raw:
                          data: |
                            #!/bin/bash
                            set -o xtrace
                            export AUTH_TOKEN=___AUTH_TOKEN___
                            export SERVER=argo-cd-argocd-server.argocd.svc.cluster.local
                            export DEPLOY_API_ENDPOINT=___DEPLOY_API_ENDPOINT___
                            echo "http://${DEPLOY_API_ENDPOINT}/deployAPIs"
                            export IS_DRENV=$(curl "http://${DEPLOY_API_ENDPOINT}/deployAPIs" -H 'Content-Type: application/json' -d '{"clusterName": "drworkshop3","apiType": "isDREnv"}')
                            echo "Server Url -  $SERVER"
                            echo "Auth Token - $AUTH_TOKEN"
                            argocd app list --server $SERVER --auth-token $AUTH_TOKEN --insecure
                            APPS=$(argocd app list --server $SERVER --auth-token $AUTH_TOKEN --insecure -o json | jq -r '.[].metadata.name')
                            for eachfile in $APPS
                            do
                              echo "App to be patched" $eachfile
                              HELM_FILE=$(argocd app get $eachfile --server $SERVER --auth-token $AUTH_TOKEN --insecure  -o json | jq -r '.spec.source.helm.valueFiles[0]')
                              echo $HELM_FILE
                              HELM_FILE=$(echo $HELM_FILE | sed "s/_dr/_live/g")
                              echo $HELM_FILE
                              argocd app set $eachfile --values $HELM_FILE
                              argocd app sync $eachfile --server $SERVER --auth-token $AUTH_TOKEN --insecure
                            done  
                      - name: deploy-script-live
                        path: /usr/local/bin/deploy-scripts/deploy_live.sh
                        mode: 755
                        raw:
                          data: |
                            #!/bin/bash
                            set -o xtrace

                            export AUTH_TOKEN=___AUTH_TOKEN___
                            export SERVER=argo-cd-argocd-server.argocd.svc.cluster.local
                            export DEPLOY_API_ENDPOINT=___DEPLOY_API_ENDPOINT___
                            echo "http://${DEPLOY_API_ENDPOINT}/deployAPIs"
                            export IS_DRENV=$(curl "http://${DEPLOY_API_ENDPOINT}/deployAPIs" -H 'Content-Type: application/json' -d '{"clusterName": "drworkshop3","apiType": "isDREnv"}')
                            echo "Server Url -  $SERVER"
                            echo "Auth Token - $AUTH_TOKEN"
                            argocd app list --server $SERVER --auth-token $AUTH_TOKEN --insecure
                            export REPO_URL="https://$GitOwnerName:$Github_TOKEN@github.com/$GitRepoFullName.git"
                            echo "Clone URL " $REPO_URL
                            git clone $REPO_URL
                            ls -l $GitRepoName
                            cd $GitRepoName/apps
                            
                            APP_FILES=$(ls ./*.yaml)
                            for eachfile in $APP_FILES
                            do 
                              echo $eachfile
                              export APP_PATH=$(yq '.spec.source.path' $eachfile)
                              if [ "$IS_DRENV" = '"true"' ]
                              then
                                export HELM_VALUE_FILE=$(find ../$APP_PATH -name "*_dr.yaml" | cut -d "/" -f 4)
                              else
                               export HELM_VALUE_FILE=$(find ../$APP_PATH -name "*_live.yaml" | cut -d "/" -f 4)
                              fi
                              echo $HELM_VALUE_FILE
                              sed -i "s/___HELM_VALUE_FILE___/$HELM_VALUE_FILE/g" $eachfile
                              argocd app create -f $eachfile  --server $SERVER --auth-token $AUTH_TOKEN --insecure
                            done
                            
                            sleep 30

                            UNSYNCED_APPS=$(argocd app list  --server $SERVER --auth-token $AUTH_TOKEN --insecure -o json  | jq -r '.[] | select(.status.sync.status == "OutOfSync") | .metadata.name')
                            for eachfile in $UNSYNCED_APPS
                            do
                              echo "App to be synced" $eachfile
                              argocd app sync $eachfile --server $SERVER --auth-token $AUTH_TOKEN --insecure
                            done
                  container:
                    image: amazonlinux:latest
                    command: [/usr/local/bin/deploy-scripts/deploy_all.sh]
                    env:
                      - name: Github_TOKEN
                        valueFrom:
                          secretKeyRef:
                            name: github-access
                            key: token 
                      - name: GitRepoFullName
                        value: "{{`{{inputs.parameters.gitrepofullname}}`}}"
                      - name: GitOwnerName
                        value: "{{`{{inputs.parameters.gitownername}}`}}"
                      - name: GitRepoName
                        value: "{{`{{inputs.parameters.repoName}}`}}"
                      - name: PullRequestNumber
                        value: "{{`{{inputs.parameters.pr-number}}`}}"
                      - name: dr_signal
                        value: "{{`{{inputs.parameters.dr_signal}}`}}"
          parameters:
            - src:
                dependencyName: github-dep 
                dataKey: body.repository.owner.login
              dest: spec.arguments.parameters.0.value
            - src:
                dependencyName: github-dep 
                dataKey: body.repository.full_name
              dest: spec.arguments.parameters.1.value
            - src:
                dependencyName: github-dep 
                dataKey: body.repository.name
              dest: spec.arguments.parameters.2.value
            - src:
                dependencyName: github-dep 
                dataKey: body.number
              dest: spec.arguments.parameters.3.value
            - src:
                dependencyName: webhook-dep 
                dataKey: body.operation
                value: "n/a"
              dest: spec.arguments.parameters.4.value
